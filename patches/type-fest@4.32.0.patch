diff --git a/node_modules/type-fest/.bun-tag-5ae6cc15653ec4c1 b/.bun-tag-5ae6cc15653ec4c1
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/type-fest/.bun-tag-af06f9a21a06bace b/.bun-tag-af06f9a21a06bace
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/source/split.d.ts b/source/split.d.ts
index d7b5d71c849d6490cda794fa9ff5c20f12cc71af..45cefc4f26b10bf589e5041b8299faedb28c2b53 100644
--- a/source/split.d.ts
+++ b/source/split.d.ts
@@ -22,8 +22,10 @@ array = split(items, ',');
 export type Split<
 	S extends string,
 	Delimiter extends string,
-> = S extends `${infer Head}${Delimiter}${infer Tail}`
-	? [Head, ...Split<Tail, Delimiter>]
-	: S extends Delimiter
-		? []
-		: [S];
+> = string extends S ? string[]
+	: Delimiter extends infer _Delimiter extends string? S extends `${infer Head}${_Delimiter}${infer Tail}`
+		? [Head, ...Split<Tail, _Delimiter>]
+		: S extends _Delimiter
+			? []
+			: [S]: never;
+
diff --git a/source/string-slice.d.ts b/source/string-slice.d.ts
index e610e8f0c40ac3b57fd440abc00cdee5269099bc..15b16bf438da56bd0b0ce7ce862bf75701bb955b 100644
--- a/source/string-slice.d.ts
+++ b/source/string-slice.d.ts
@@ -31,7 +31,7 @@ export type StringSlice<
 	Start extends number = 0,
 	End extends number = StringToArray<S>['length'],
 > = string extends S
-	? string[]
+	? string
 	: ArraySlice<StringToArray<S>, Start, End> extends infer R extends readonly string[]
 		? Join<R, ''>
 		: never;
diff --git a/source/sum.d.ts b/source/sum.d.ts
index 29d07dc30c1f2056b607623483fab45e00f33a8e..59451c440d089df8cb5fb5d4eb7e082ca4107a21 100644
--- a/source/sum.d.ts
+++ b/source/sum.d.ts
@@ -36,35 +36,46 @@ Sum<PositiveInfinity, NegativeInfinity>;
 @category Numeric
 */
 // TODO: Support big integer and negative number.
-export type Sum<A extends number, B extends number> = number extends A | B
-	? number
-	: [
-		IsEqual<A, PositiveInfinity>, IsEqual<A, NegativeInfinity>,
-		IsEqual<B, PositiveInfinity>, IsEqual<B, NegativeInfinity>,
-	] extends infer R extends [boolean, boolean, boolean, boolean]
-		? Or<
-		And<IsEqual<R[0], true>, IsEqual<R[3], false>>,
-		And<IsEqual<R[2], true>, IsEqual<R[1], false>>
-		> extends true
-			? PositiveInfinity
-			: Or<
-			And<IsEqual<R[1], true>, IsEqual<R[2], false>>,
-			And<IsEqual<R[3], true>, IsEqual<R[0], false>>
-			> extends true
+export type Sum<A extends number, B extends number> = A extends infer _A extends number
+	? B extends infer _B extends number
+		? number extends _A | _B
+			? number
+			: [
+					IsEqual<_A, PositiveInfinity>,
+					IsEqual<_A, NegativeInfinity>,
+					IsEqual<_B, PositiveInfinity>,
+					IsEqual<_B, NegativeInfinity>
+				] extends infer R extends [boolean, boolean, boolean, boolean]
+			? Or<
+					And<IsEqual<R[0], true>, IsEqual<R[3], false>>,
+					And<IsEqual<R[2], true>, IsEqual<R[1], false>>
+				> extends true
+				? PositiveInfinity
+				: Or<
+						And<IsEqual<R[1], true>, IsEqual<R[2], false>>,
+						And<IsEqual<R[3], true>, IsEqual<R[0], false>>
+					> extends true
 				? NegativeInfinity
 				: true extends R[number]
-					? number
-					: ([IsNegative<A>, IsNegative<B>] extends infer R
+				? number
+				: ([IsNegative<_A>, IsNegative<_B>] extends infer R
 						? [false, false] extends R
-							? [...BuildTuple<A>, ...BuildTuple<B>]['length']
+							? [...BuildTuple<_A>, ...BuildTuple<_B>]['length']
 							: [true, true] extends R
-								? number
-								: TupleMax<[NumberAbsolute<A>, NumberAbsolute<B>]> extends infer Max_
-									? TupleMin<[NumberAbsolute<A>, NumberAbsolute<B>]> extends infer Min_ extends number
-										? Max_ extends A | B
-											? Subtract<Max_, Min_>
-											: number
-										: never
-									: never
-						: never) & number
-		: never;
+							? number
+							: TupleMax<
+								[NumberAbsolute<_A>, NumberAbsolute<_B>]
+							> extends infer Max_
+							? TupleMin<
+								[NumberAbsolute<_A>, NumberAbsolute<_B>]
+							> extends infer Min_ extends number
+								? Max_ extends _A | _B
+									? Subtract<Max_, Min_>
+									: number
+								: never
+							: never
+						: never) &
+						number
+			: never
+		: never
+	: never;
